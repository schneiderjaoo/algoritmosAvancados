{"ast":null,"code":"var _jsxFileName = \"C:\\\\Estudos\\\\algoritmosAvancados\\\\frontend\\\\src\\\\components\\\\Teclado.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TecladoButton from \"./TecladoButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Teclado({\n  teclas,\n  setSenha,\n  resetSenha\n}) {\n  _s();\n  const [valorDigitado, setValorDigitado] = useState(\"\");\n  useEffect(() => {\n    if (resetSenha) {\n      setValorDigitado(\"\"); // Limpa o campo\n    }\n  }, [resetSenha]); // Sempre que `resetSenha` mudar, o campo será resetado\n\n  const handleClick = value => {\n    const novoValor = valorDigitado + value;\n    setValorDigitado(novoValor.replace(\",\", \"\"));\n    setSenha(novoValor.replace(\",\", \"\"));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"teclado-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: valorDigitado,\n        readOnly: true,\n        className: \"display-input\",\n        placeholder: \"Digite os n\\xFAmeros\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"teclado\",\n      children: [teclas.map((tecla, index) => /*#__PURE__*/_jsxDEV(TecladoButton, {\n        label: tecla.label,\n        value: tecla.value,\n        onClick: handleClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"teclado-button\",\n        children: \"Apagar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(Teclado, \"9+ykLKnFcReJ382ghEaecR5Y2s8=\");\n_c = Teclado;\nexport default Teclado;\nvar _c;\n$RefreshReg$(_c, \"Teclado\");","map":{"version":3,"names":["React","useState","useEffect","TecladoButton","jsxDEV","_jsxDEV","Teclado","teclas","setSenha","resetSenha","_s","valorDigitado","setValorDigitado","handleClick","value","novoValor","replace","className","children","type","readOnly","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","tecla","index","label","onClick","_c","$RefreshReg$"],"sources":["C:/Estudos/algoritmosAvancados/frontend/src/components/Teclado.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TecladoButton from \"./TecladoButton\";\r\n\r\nfunction Teclado({ teclas, setSenha, resetSenha }) {\r\n  const [valorDigitado, setValorDigitado] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (resetSenha) {\r\n      setValorDigitado(\"\"); // Limpa o campo\r\n    }\r\n  }, [resetSenha]); // Sempre que `resetSenha` mudar, o campo será resetado\r\n\r\n  const handleClick = (value) => {\r\n    const novoValor = valorDigitado + value;\r\n    setValorDigitado(novoValor.replace(\",\", \"\"));\r\n    setSenha(novoValor.replace(\",\", \"\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"teclado-container\">\r\n      <div className=\"display\">\r\n        <input\r\n          type=\"password\"\r\n          value={valorDigitado}\r\n          readOnly\r\n          className=\"display-input\"\r\n          placeholder=\"Digite os números\"\r\n        />\r\n      </div>\r\n      <div className=\"teclado\">\r\n        {teclas.map((tecla, index) => (\r\n          <TecladoButton\r\n            key={index}\r\n            label={tecla.label}\r\n            value={tecla.value}\r\n            onClick={handleClick}\r\n          />\r\n        ))}\r\n        <button className=\"teclado-button\">\r\n          Apagar\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Teclado;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,OAAOA,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,IAAIO,UAAU,EAAE;MACdG,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB,MAAMI,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMC,SAAS,GAAGJ,aAAa,GAAGG,KAAK;IACvCF,gBAAgB,CAACG,SAAS,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC5CR,QAAQ,CAACO,SAAS,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;EACtC,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCb,OAAA;MAAKY,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBb,OAAA;QACEc,IAAI,EAAC,UAAU;QACfL,KAAK,EAAEH,aAAc;QACrBS,QAAQ;QACRH,SAAS,EAAC,eAAe;QACzBI,WAAW,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpB,OAAA;MAAKY,SAAS,EAAC,SAAS;MAAAC,QAAA,GACrBX,MAAM,CAACmB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBvB,OAAA,CAACF,aAAa;QAEZ0B,KAAK,EAAEF,KAAK,CAACE,KAAM;QACnBf,KAAK,EAAEa,KAAK,CAACb,KAAM;QACnBgB,OAAO,EAAEjB;MAAY,GAHhBe,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC,eACFpB,OAAA;QAAQY,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAErC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CAzCQJ,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AA2ChB,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}