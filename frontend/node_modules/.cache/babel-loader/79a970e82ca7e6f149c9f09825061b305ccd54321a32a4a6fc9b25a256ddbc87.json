{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import Teclado from\"./components/Teclado\";import AcessButton from\"./components/AcessButton\";import CreateUserButton from\"./components/CreateUserButton\";import tecladoService from\"./services/tecladoService\";import logo from\"../src/resources/catolica.png\";import CreateUserModal from\"./components/CreateUserModal\";import UserGrid from\"./components/userGrid\";import CryptoJS from\"crypto-js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const chaveSecreta=\"teste-front\";function App(){const[teclado,setTeclado]=useState([]);const[erro,setErro]=useState(\"\");const[senha,setSenha]=useState(\"\");const[resetSenha,setResetSenha]=useState(false);const[usuario,setUsuario]=useState(\"\");useEffect(()=>{gerarTeclado();},[]);const gerarTeclado=async()=>{try{const response=await tecladoService.gerarTeclado();setTeclado(response.data);}catch(err){setErro(\"Erro ao carregar teclado\");}};const acessarSistema=async()=>{try{const senhaCriptografada=CryptoJS.AES.encrypt(senha,chaveSecreta).toString();const response=await tecladoService.acessarSistema(senhaCriptografada,usuario);localStorage.setItem(\"token\",response.data.token);console.log(\"Token: \",response.data.token);setErro(\"\");alert(response.data.message);}catch(err){gerarTeclado();setSenha(\"\");setResetSenha(true);setErro(err.response?err.response.data.message:\"Erro desconhecido.\");}};const[isModalOpen,setIsModalOpen]=useState(false);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Teclado Virtual\"}),/*#__PURE__*/_jsx(UserGrid,{usuario:usuario,setUsuario:setUsuario}),erro&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:erro}),/*#__PURE__*/_jsx(Teclado,{teclas:teclado,setSenha:setSenha,resetSenha:resetSenha}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(AcessButton,{onAcess:acessarSistema}),/*#__PURE__*/_jsx(CreateUserButton,{onAcess:()=>setIsModalOpen(true)})]}),/*#__PURE__*/_jsx(CreateUserModal,{isOpen:isModalOpen,onRequestClose:()=>setIsModalOpen(false)}),/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"Cat\\xF3lica SC\",className:\"logo\"})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","Teclado","AcessButton","CreateUserButton","tecladoService","logo","CreateUserModal","UserGrid","CryptoJS","jsx","_jsx","jsxs","_jsxs","chaveSecreta","App","teclado","setTeclado","erro","setErro","senha","setSenha","resetSenha","setResetSenha","usuario","setUsuario","gerarTeclado","response","data","err","acessarSistema","senhaCriptografada","AES","encrypt","toString","localStorage","setItem","token","console","log","alert","message","isModalOpen","setIsModalOpen","className","children","teclas","onAcess","isOpen","onRequestClose","src","alt"],"sources":["C:/Estudos/algoritmosAvancados/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Teclado from \"./components/Teclado\";\r\nimport AcessButton from \"./components/AcessButton\";\r\nimport CreateUserButton from \"./components/CreateUserButton\";\r\nimport tecladoService from \"./services/tecladoService\";\r\nimport logo from \"../src/resources/catolica.png\";\r\nimport CreateUserModal from \"./components/CreateUserModal\";\r\nimport UserGrid from \"./components/userGrid\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst chaveSecreta = \"teste-front\";\r\n\r\nfunction App() {\r\n  const [teclado, setTeclado] = useState([]);\r\n  const [erro, setErro] = useState(\"\");\r\n  const [senha, setSenha] = useState(\"\");\r\n  const [resetSenha, setResetSenha] = useState(false);\r\n  const [usuario, setUsuario] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    gerarTeclado();\r\n  }, []);\r\n\r\n  const gerarTeclado = async () => {\r\n    try {\r\n      const response = await tecladoService.gerarTeclado();\r\n      setTeclado(response.data);\r\n    } catch (err) {\r\n      setErro(\"Erro ao carregar teclado\");\r\n    }\r\n  };\r\n\r\n  const acessarSistema = async () => {\r\n    try {\r\n      const senhaCriptografada = CryptoJS.AES.encrypt(senha, chaveSecreta).toString();\r\n      const response = await tecladoService.acessarSistema(senhaCriptografada, usuario);\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      console.log(\"Token: \", response.data.token);\r\n      setErro(\"\");\r\n      alert(response.data.message);\r\n    } catch (err) {\r\n      gerarTeclado();\r\n      setSenha(\"\");\r\n      setResetSenha(true);\r\n      setErro(err.response ? err.response.data.message : \"Erro desconhecido.\");\r\n    }\r\n  };\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n      <UserGrid usuario={usuario} setUsuario={setUsuario} />\r\n      {erro && <p className=\"error-message\">{erro}</p>}\r\n      <Teclado teclas={teclado} setSenha={setSenha} resetSenha={resetSenha} />\r\n      \r\n      <div className=\"button-container\">\r\n        <AcessButton onAcess={acessarSistema} />\r\n        <CreateUserButton onAcess={() => setIsModalOpen(true)} />\r\n      </div>\r\n      \r\n      <CreateUserModal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)} />\r\n      <img src={logo} alt=\"CatÃ³lica SC\" className=\"logo\"/>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAC1C,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,gBAAgB,KAAM,+BAA+B,CAC5D,MAAO,CAAAC,cAAc,KAAM,2BAA2B,CACtD,MAAO,CAAAC,IAAI,KAAM,+BAA+B,CAChD,MAAO,CAAAC,eAAe,KAAM,8BAA8B,CAC1D,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjC,KAAM,CAAAC,YAAY,CAAG,aAAa,CAElC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACiB,IAAI,CAAEC,OAAO,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACmB,KAAK,CAAEC,QAAQ,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACqB,UAAU,CAAEC,aAAa,CAAC,CAAGtB,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACuB,OAAO,CAAEC,UAAU,CAAC,CAAGxB,QAAQ,CAAC,EAAE,CAAC,CAE1CD,SAAS,CAAC,IAAM,CACd0B,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAACqB,YAAY,CAAC,CAAC,CACpDT,UAAU,CAACU,QAAQ,CAACC,IAAI,CAAC,CAC3B,CAAE,MAAOC,GAAG,CAAE,CACZV,OAAO,CAAC,0BAA0B,CAAC,CACrC,CACF,CAAC,CAED,KAAM,CAAAW,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAC,kBAAkB,CAAGtB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAACb,KAAK,CAAEN,YAAY,CAAC,CAACoB,QAAQ,CAAC,CAAC,CAC/E,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAACyB,cAAc,CAACC,kBAAkB,CAAEP,OAAO,CAAC,CACjFW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAET,QAAQ,CAACC,IAAI,CAACS,KAAK,CAAC,CAClDC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEZ,QAAQ,CAACC,IAAI,CAACS,KAAK,CAAC,CAC3ClB,OAAO,CAAC,EAAE,CAAC,CACXqB,KAAK,CAACb,QAAQ,CAACC,IAAI,CAACa,OAAO,CAAC,CAC9B,CAAE,MAAOZ,GAAG,CAAE,CACZH,YAAY,CAAC,CAAC,CACdL,QAAQ,CAAC,EAAE,CAAC,CACZE,aAAa,CAAC,IAAI,CAAC,CACnBJ,OAAO,CAACU,GAAG,CAACF,QAAQ,CAAGE,GAAG,CAACF,QAAQ,CAACC,IAAI,CAACa,OAAO,CAAG,oBAAoB,CAAC,CAC1E,CACF,CAAC,CAED,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAG1C,QAAQ,CAAC,KAAK,CAAC,CAErD,mBACEY,KAAA,QAAK+B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBlC,IAAA,OAAAkC,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBlC,IAAA,CAACH,QAAQ,EAACgB,OAAO,CAAEA,OAAQ,CAACC,UAAU,CAAEA,UAAW,CAAE,CAAC,CACrDP,IAAI,eAAIP,IAAA,MAAGiC,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAE3B,IAAI,CAAI,CAAC,cAChDP,IAAA,CAACT,OAAO,EAAC4C,MAAM,CAAE9B,OAAQ,CAACK,QAAQ,CAAEA,QAAS,CAACC,UAAU,CAAEA,UAAW,CAAE,CAAC,cAExET,KAAA,QAAK+B,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/BlC,IAAA,CAACR,WAAW,EAAC4C,OAAO,CAAEjB,cAAe,CAAE,CAAC,cACxCnB,IAAA,CAACP,gBAAgB,EAAC2C,OAAO,CAAEA,CAAA,GAAMJ,cAAc,CAAC,IAAI,CAAE,CAAE,CAAC,EACtD,CAAC,cAENhC,IAAA,CAACJ,eAAe,EAACyC,MAAM,CAAEN,WAAY,CAACO,cAAc,CAAEA,CAAA,GAAMN,cAAc,CAAC,KAAK,CAAE,CAAE,CAAC,cACrFhC,IAAA,QAAKuC,GAAG,CAAE5C,IAAK,CAAC6C,GAAG,CAAC,gBAAa,CAACP,SAAS,CAAC,MAAM,CAAC,CAAC,EACjD,CAAC,CAGV,CAEA,cAAe,CAAA7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}