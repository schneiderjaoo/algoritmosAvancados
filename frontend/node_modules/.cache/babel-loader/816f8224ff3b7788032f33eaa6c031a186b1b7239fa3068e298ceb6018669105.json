{"ast":null,"code":"var _jsxFileName = \"C:\\\\Estudos\\\\algoritmosAvancados\\\\frontend\\\\src\\\\components\\\\TecladoButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TecladoButton from \"./TecladoButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Teclado({\n  teclas = [],\n  onSenhaChange\n}) {\n  _s();\n  // ðŸ”¹ Valor padrÃ£o `[]`\n  const [valorDigitado, setValorDigitado] = useState(\"\");\n  const handleClick = value => {\n    var novoValor = valorDigitado + value;\n    novoValor = novoValor.replace(',', '');\n    setValorDigitado(novoValor);\n    onSenhaChange(novoValor);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"teclado-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: valorDigitado,\n        readOnly: true,\n        className: \"display-input\",\n        placeholder: \"Digite os n\\xFAmeros\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"teclado\",\n      children: teclas.length > 0 ?\n      // ðŸ”¹ Verifica se `teclas` tem valores antes de mapear\n      teclas.map((tecla, index) => /*#__PURE__*/_jsxDEV(TecladoButton, {\n        label: tecla.label,\n        value: tecla.value,\n        onClick: () => handleClick(tecla.value)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Carregando teclado...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) // ðŸ”¹ Mensagem para quando `teclas` estiver vazio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(Teclado, \"iEZew4c8jzBbjOcz3gPf3aTwDnU=\");\n_c = Teclado;\nexport default Teclado;\nvar _c;\n$RefreshReg$(_c, \"Teclado\");","map":{"version":3,"names":["React","useState","TecladoButton","jsxDEV","_jsxDEV","Teclado","teclas","onSenhaChange","_s","valorDigitado","setValorDigitado","handleClick","value","novoValor","replace","className","children","type","readOnly","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","tecla","index","label","onClick","_c","$RefreshReg$"],"sources":["C:/Estudos/algoritmosAvancados/frontend/src/components/TecladoButton.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TecladoButton from \"./TecladoButton\";\r\n\r\nfunction Teclado({ teclas = [], onSenhaChange }) { // ðŸ”¹ Valor padrÃ£o `[]`\r\n  const [valorDigitado, setValorDigitado] = useState(\"\");\r\n\r\n  const handleClick = (value) => {\r\n    var novoValor = valorDigitado + value;  \r\n    novoValor = novoValor.replace(',', '');\r\n    setValorDigitado(novoValor);\r\n    onSenhaChange(novoValor);\r\n  };\r\n\r\n  return (\r\n    <div className=\"teclado-container\">\r\n      <div className=\"display\">\r\n        <input\r\n          type=\"text\"\r\n          value={valorDigitado}\r\n          readOnly\r\n          className=\"display-input\"\r\n          placeholder=\"Digite os nÃºmeros\"\r\n        />\r\n      </div>\r\n      <div className=\"teclado\">\r\n        {teclas.length > 0 ? ( // ðŸ”¹ Verifica se `teclas` tem valores antes de mapear\r\n          teclas.map((tecla, index) => (\r\n            <TecladoButton\r\n              key={index}\r\n              label={tecla.label}\r\n              value={tecla.value}\r\n              onClick={() => handleClick(tecla.value)}  \r\n            />\r\n          ))\r\n        ) : (\r\n          <p>Carregando teclado...</p> // ðŸ”¹ Mensagem para quando `teclas` estiver vazio\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Teclado;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,OAAOA,CAAC;EAAEC,MAAM,GAAG,EAAE;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EAAE;EACjD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMU,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIC,SAAS,GAAGJ,aAAa,GAAGG,KAAK;IACrCC,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IACtCJ,gBAAgB,CAACG,SAAS,CAAC;IAC3BN,aAAa,CAACM,SAAS,CAAC;EAC1B,CAAC;EAED,oBACET,OAAA;IAAKW,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCZ,OAAA;MAAKW,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBZ,OAAA;QACEa,IAAI,EAAC,MAAM;QACXL,KAAK,EAAEH,aAAc;QACrBS,QAAQ;QACRH,SAAS,EAAC,eAAe;QACzBI,WAAW,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNnB,OAAA;MAAKW,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBV,MAAM,CAACkB,MAAM,GAAG,CAAC;MAAK;MACrBlB,MAAM,CAACmB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACtBvB,OAAA,CAACF,aAAa;QAEZ0B,KAAK,EAAEF,KAAK,CAACE,KAAM;QACnBhB,KAAK,EAAEc,KAAK,CAACd,KAAM;QACnBiB,OAAO,EAAEA,CAAA,KAAMlB,WAAW,CAACe,KAAK,CAACd,KAAK;MAAE,GAHnCe,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC,gBAEFnB,OAAA;QAAAY,QAAA,EAAG;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC9B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CArCQH,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAuChB,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}